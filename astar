def aStarAlgo(start_node,stop_node):
open_set=set(start_node)
closed_set=set()
g={}
parents={}
g[start_node]=0
parents[start_node]=start_node
while len(open_set)>0:
n=None
for v in open_set:
if n==None or g[v]+heuristic(v)<g[n]+heuristic(n):
n=v
if n== stop_node or Graph_nodes[n] == None:
pass
else:
for (m,weight) in get_neighbors(n):
if m not in open_set and m not in closed_set:
open_set.add(m)
parents[m]=n
g[m]=g[n]+weight
else:
if g[m]>g[n]+weight:
g[m]=g[n]+weight
parents[m]=n
if m in closed_set:
closed_set.remove(m)
open_set.add(m)
if n == None:
print('Path Does not exist')
return None
if n == stop_node:
Path=[]
while parents[n]!= n:
path.append(n)
n=parents[n]
path.append(start_node)
path.reverse()
print('Path Found : {}'.format(path))
return path
open_set.remove(n)
closed_set.add(n)
print('path does not exist')
return None
def get_neighbors(v):
if v in Graph_nodes:
return Graph_nodes[v]
else:
return None
def heuristic(n):
H_dist = {
'A'210J
' )
‘ )
h
b
m m m 6 n w
U'IOWUJNU'IW
M
\-}
return H_dist[n]
Graph_ odes = {
'A' [(‘B' 6) ('F'13)],
'B':[('CIJ3)J(IDIJ2)]J
ICI:[(IDI11)J(IEIJS)]J
'D'2[('C',1),('E',8)],
'E':[('IIJS)J(IJ')5)]J
'F'2[('G';1);('H';7)],
'G'=[('I',3)],
'H':[('I';2)],
'I'=[('E';5);('3';3)],
}
aStarAlgo('A','J')
Path Found : ['A', 'F', 'G', 'I', 'J']
Out[7]: ['A', 'F', 'G', 'I', '3']
